//! This library is generated by [`openapi-client-generator`](https://crates.io/crates/openapi-client-generator).
#![allow(non_camel_case_types)]

use serde_json::json;
use serde::{Serialize, Deserialize};
use httpclient::RequestBuilder;
pub mod model;
use crate::model::*;
pub struct PetStoreClient {
    client: httpclient::Client,
}
impl PetStoreClient {
    pub fn new(url: &str) -> Self {
        let client = httpclient::Client::new(Some(url.to_string()));
        PetStoreClient { client }
    }
    pub fn with_middleware<M: httpclient::Middleware + 'static>(
        mut self,
        middleware: M,
    ) -> Self {
        self.client = self.client.with_middleware(middleware);
        self
    }
    ///List all pets
    pub async fn list_pets(&self, limit: i64) -> anyhow::Result<Vec<Pet>> {
        let res = self
            .client
            .get(&format!("/pets"))
            .send()
            .await
            .unwrap()
            .error_for_status();
        match res {
            Ok(res) => res.json().await.map_err(|e| anyhow::anyhow!("{:?}", e)),
            Err(res) => {
                let text = res.text().await.map_err(|e| anyhow::anyhow!("{:?}", e));
                Err(anyhow::anyhow!("{:?}", text))
            }
        }
    }
    ///Info for a specific pet
    pub async fn show_pet_by_id(
        &self,
        pet_id: String,
    ) -> anyhow::Result<serde_json::Value> {
        let res = self
            .client
            .get(&format!("/pets/{pet_id}"))
            .send()
            .await
            .unwrap()
            .error_for_status();
        match res {
            Ok(res) => res.json().await.map_err(|e| anyhow::anyhow!("{:?}", e)),
            Err(res) => {
                let text = res.text().await.map_err(|e| anyhow::anyhow!("{:?}", e));
                Err(anyhow::anyhow!("{:?}", text))
            }
        }
    }
}
